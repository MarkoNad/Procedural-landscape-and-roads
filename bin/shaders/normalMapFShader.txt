#version 400 core

in vec2 pass_textureCoordinates;
in vec3 toLightVector;
in vec3 toCameraVector;
in float visibility;

out vec4 out_Color;

uniform sampler2D modelTexture;
uniform sampler2D normalMap;
uniform vec3 lightColour;
uniform float shineDamper;
uniform float reflectivity;
uniform vec3 skyColour;

const vec3 ambient = vec3(0.25, 0.25, 0.25);

void main(void) {
	vec4 textureColour = texture(modelTexture, pass_textureCoordinates);
	if(textureColour.a < 0.5) discard;
	
	vec4 normalMapValue = 2.0 * texture(normalMap, pass_textureCoordinates) - 1.0;
	
	vec3 unitNormal = normalize(normalMapValue.rgb);
	vec3 unitLightVector = normalize(toLightVector);
	
	float nDotl = dot(unitNormal, unitLightVector);
	float brightness = max(nDotl, 0.0);
	vec3 diffuse = brightness * lightColour;
	
	vec3 unitVectorToCamera = normalize(toCameraVector);
	vec3 lightDirection = - unitLightVector;
	vec3 reflectedLightDirection = reflect(lightDirection, unitNormal);
	
	float specularFactor = dot(reflectedLightDirection, unitVectorToCamera);
	specularFactor = max(specularFactor, 0.0);
	float dampedFactor = pow(specularFactor, shineDamper);
	vec3 finalSpecular = dampedFactor * reflectivity * lightColour;

	out_Color = (vec4(ambient, 1.0) + vec4(diffuse, 1.0)) * textureColour + vec4(finalSpecular, 1.0);
	out_Color = mix(vec4(skyColour, 1.0), out_Color, visibility);
}